This is currently an experimental Node.js extension.

The ESRI C++ File Geodatabase API is available from the following link.
http://resources.arcgis.com/content/geodatabases/10.0/file-gdb-api

You will need the Linux 32-bit version. This is a Linux ONLY extension.

To currently run this script you will need to add the samples/data folder to the root of the nodefgdb extension.
You should have a folder structure as follows
node_fgdb
- data
- nodefgdb.cc
- wscript

Edit the wscript file so that it points your directory.

Run the node-waf build script
node-waf configure && node-waf build

You should get some ignore #pragma warning messages followed by a 'build' finished successfully message.

Start node from the extensions root directory

odoe@linuxbox:~/dev/node_fgdb$ node
> var test = require("./build/default/nodefgdb");
> var fgdb = new test.NodeFGDB();

As of right now, it only pulls data from a single Table, the Cities Table. This will be configurable in future releases.
You can find the field names by using the fields() method.
> fgdb.fields();
'OBJECTID, Shape, CITY_FIPS, CITY_NAME, STATE_FIPS, STATE_NAME, STATE_CITY, TYPE, CAPITAL, ELEVATION, POP1990, POPCAT'

Now that you know the field names, you can write your own valid query.
> var query = "CITY_NAME LIKE 'Port%'";
> fgdb.query(query);
'Port Angeles, Portland, Portland, Portsmouth, Port Huron, Portage, Port Chester, Portage Lakes, Portage, Port Washington, Portsmouth, Portsmouth, Porterville, Portales, Port Hueneme, Port Neches, Port Arthur, Port Orange, Port Lavaca, Portland, Port St. Lucie, Port Charlotte'

This is so far a proof of concept just to show that the ESRI File Geodatabase API could be used as a node.js extension.
Now that I have gotten this much working, I will be working on adding basic query functionality and hope to implement GeoJSON/ESRIJson.
